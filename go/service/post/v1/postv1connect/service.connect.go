// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service/post/v1/service.proto

package postv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gaesemo/blog-api/go/service/post/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PostServiceName is the fully-qualified name of the PostService service.
	PostServiceName = "service.post.v1.PostService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PostServiceCreateProcedure is the fully-qualified name of the PostService's Create RPC.
	PostServiceCreateProcedure = "/service.post.v1.PostService/Create"
	// PostServiceListProcedure is the fully-qualified name of the PostService's List RPC.
	PostServiceListProcedure = "/service.post.v1.PostService/List"
	// PostServiceDetailProcedure is the fully-qualified name of the PostService's Detail RPC.
	PostServiceDetailProcedure = "/service.post.v1.PostService/Detail"
	// PostServiceUpdateProcedure is the fully-qualified name of the PostService's Update RPC.
	PostServiceUpdateProcedure = "/service.post.v1.PostService/Update"
	// PostServiceDeleteProcedure is the fully-qualified name of the PostService's Delete RPC.
	PostServiceDeleteProcedure = "/service.post.v1.PostService/Delete"
)

// PostServiceClient is a client for the service.post.v1.PostService service.
type PostServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	// rpc Search(SearchRequest) returns (SearchResponse) {} // TODO: define the concept of search.
	Detail(context.Context, *connect.Request[v1.DetailRequest]) (*connect.Response[v1.DetailResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewPostServiceClient constructs a client for the service.post.v1.PostService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	postServiceMethods := v1.File_service_post_v1_service_proto.Services().ByName("PostService").Methods()
	return &postServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+PostServiceCreateProcedure,
			connect.WithSchema(postServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+PostServiceListProcedure,
			connect.WithSchema(postServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		detail: connect.NewClient[v1.DetailRequest, v1.DetailResponse](
			httpClient,
			baseURL+PostServiceDetailProcedure,
			connect.WithSchema(postServiceMethods.ByName("Detail")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+PostServiceUpdateProcedure,
			connect.WithSchema(postServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+PostServiceDeleteProcedure,
			connect.WithSchema(postServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// postServiceClient implements PostServiceClient.
type postServiceClient struct {
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	list   *connect.Client[v1.ListRequest, v1.ListResponse]
	detail *connect.Client[v1.DetailRequest, v1.DetailResponse]
	update *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// Create calls service.post.v1.PostService.Create.
func (c *postServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// List calls service.post.v1.PostService.List.
func (c *postServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Detail calls service.post.v1.PostService.Detail.
func (c *postServiceClient) Detail(ctx context.Context, req *connect.Request[v1.DetailRequest]) (*connect.Response[v1.DetailResponse], error) {
	return c.detail.CallUnary(ctx, req)
}

// Update calls service.post.v1.PostService.Update.
func (c *postServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls service.post.v1.PostService.Delete.
func (c *postServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// PostServiceHandler is an implementation of the service.post.v1.PostService service.
type PostServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	// rpc Search(SearchRequest) returns (SearchResponse) {} // TODO: define the concept of search.
	Detail(context.Context, *connect.Request[v1.DetailRequest]) (*connect.Response[v1.DetailResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewPostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostServiceHandler(svc PostServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	postServiceMethods := v1.File_service_post_v1_service_proto.Services().ByName("PostService").Methods()
	postServiceCreateHandler := connect.NewUnaryHandler(
		PostServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(postServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceListHandler := connect.NewUnaryHandler(
		PostServiceListProcedure,
		svc.List,
		connect.WithSchema(postServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceDetailHandler := connect.NewUnaryHandler(
		PostServiceDetailProcedure,
		svc.Detail,
		connect.WithSchema(postServiceMethods.ByName("Detail")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceUpdateHandler := connect.NewUnaryHandler(
		PostServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(postServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceDeleteHandler := connect.NewUnaryHandler(
		PostServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(postServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/service.post.v1.PostService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PostServiceCreateProcedure:
			postServiceCreateHandler.ServeHTTP(w, r)
		case PostServiceListProcedure:
			postServiceListHandler.ServeHTTP(w, r)
		case PostServiceDetailProcedure:
			postServiceDetailHandler.ServeHTTP(w, r)
		case PostServiceUpdateProcedure:
			postServiceUpdateHandler.ServeHTTP(w, r)
		case PostServiceDeleteProcedure:
			postServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostServiceHandler struct{}

func (UnimplementedPostServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.post.v1.PostService.Create is not implemented"))
}

func (UnimplementedPostServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.post.v1.PostService.List is not implemented"))
}

func (UnimplementedPostServiceHandler) Detail(context.Context, *connect.Request[v1.DetailRequest]) (*connect.Response[v1.DetailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.post.v1.PostService.Detail is not implemented"))
}

func (UnimplementedPostServiceHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.post.v1.PostService.Update is not implemented"))
}

func (UnimplementedPostServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.post.v1.PostService.Delete is not implemented"))
}
